@model ProfileViewModel

@{
    ViewData["Title"] = "Profile";
}

<div class="row">
    <div class="col-md-4 d-flex">
        <div class="card">
            <div class="image">
                <img src="~/images/profile_cover_image.png" alt="...">
            </div>
            <div class="card-body text-center">
                <h2>@Model.FirstName @Model.LastName</h2>
                <h5>Balance: @Model.AccountBalance</h5>
                @if (@Model.CreditCards.Count == 1)
                {
                    <h6>@Model.CreditCards.Count credit card</h6>
                }
                else
                {
                    <h6>@Model.CreditCards.Count credit cards</h6>
                }
            </div>
        </div>
    </div>
    <div class="col-md-8 ">
        <div class="card card-user">
            <div class="card-header">
                <h4 class="card-title">Edit Profile</h4>
            </div>
            <div class="card-body">
                <form id="edit-form" asp-area="" asp-controller="Profile" asp-action="Edit" method="post">
                    <div class="row">
                        <div class="col-md-6 pr-1">
                            <div class="form-group">
                                <label asp-for="@Model.FirstName" class="control-label">First Name</label>
                                <input asp-for="@Model.FirstName" type="text" class="form-control" value="@Model.FirstName" />
                                <span asp-validation-for="@Model.FirstName" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6 pl-1">
                            <div class="form-group">
                                <label asp-for="@Model.LastName">Last Name</label>
                                <input asp-for="@Model.LastName" type="text" class="form-control" value="@Model.LastName">
                                <span asp-validation-for="@Model.LastName" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 pr-1">
                            <div class="form-group">
                                <label>Date of birth</label>
                                <input type="text" class="form-control" placeholder="@Model.DateBirth.ToShortDateString()" readonly>
                            </div>
                        </div>
                        <div class="col-md-6 pl-1">
                            <div class="form-group">
                                <label>Email</label>
                                <input type="text" class="form-control" placeholder="@Model.Email" readonly>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Your Currency</label>
                                <input type="text" class="form-control" placeholder="@Model.Currency" readonly>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="update ml-auto mr-auto">
                            <button type="submit" class="btn btn-primary btn-round">Update Profile</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h2>Transactions</h2>
    </div>
    <div class="card-body">
        @(Html.Kendo()
            .Grid<TransactionUserListModel>()
            .Name("Transactions")
            .Columns(columns =>
            {
                columns.Bound(t => t.Date).Title("Transaction date").Format("{0:dd/MM/yyyy h:mm:ss tt}");
                columns.Bound(t => t.Type);
                columns.Bound(t => t.QuotedCurrencyAmount).Format("{0:c}").Title("Ccy");
                columns.Bound(t => t.Description);
            })
            .HtmlAttributes(new { @class = "bg-dark text-warning" })
            .Pageable(page => page.PageSizes(new[] { 5, 10, 15 }))
            .Filterable(f => f.Mode(GridFilterMode.Menu))
            .Groupable()
            .Sortable()
            .ToolBar(tool =>
            {
                tool.Pdf().Text("Create PDF");
            })
            .DataSource(data =>
            {
                data
                    .Ajax()
                    .Read(read =>
                    {
                        read.Action("ReadUserTransactions", "Transactions", new { Model.UserId });

                    });
            })
        )
    </div>
</div>

@section Scripts {
    <script>
        function onCompleteFunction() {
            var form = $("#edit-form");
            form.removeData('validator');
            form.removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse(form);
        }
    </script>
}
